!function (e, t, s) { var i, a, n, h, r, o, d, l; e.Datepicker = "", h = !1, r = { classes: "", inline: !1, language: "ru", startDate: new Date, firstDay: "", weekends: [6, 0], dateFormat: "", altField: "", altFieldDateFormat: "@", toggleSelected: !0, keyboardNav: !0, position: "bottom left", offset: 12, view: "days", minView: "days", showOtherMonths: !0, selectOtherMonths: !0, moveToOtherMonthsOnSelect: !0, showOtherYears: !0, selectOtherYears: !0, moveToOtherYearsOnSelect: !0, minDate: "", maxDate: "", disableNavWhenOutOfRange: !0, multipleDates: !1, multipleDatesSeparator: ",", range: !1, todayButton: !1, clearButton: !1, showEvent: "focus", autoClose: !1, monthsField: "monthsShort", prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>', nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>', navTitles: { days: "MM, <i>yyyy</i>", months: "yyyy", years: "yyyy1 - yyyy2" }, onSelect: "", onChangeMonth: "", onChangeYear: "", onChangeDecade: "", onChangeView: "", onRenderCell: "" }, o = { ctrlRight: [17, 39], ctrlUp: [17, 38], ctrlLeft: [17, 37], ctrlDown: [17, 40], shiftRight: [16, 39], shiftUp: [16, 38], shiftLeft: [16, 37], shiftDown: [16, 40], altUp: [18, 38], altRight: [18, 39], altLeft: [18, 37], altDown: [18, 40], ctrlShiftUp: [16, 17, 38] }, Datepicker = function (e, s) { this.el = e, this.$el = t(e), this.opts = t.extend(!0, {}, r, s, this.$el.data()), null == i && (i = t("body")), this.opts.startDate || (this.opts.startDate = new Date), "INPUT" == this.el.nodeName && (this.elIsInput = !0), this.opts.altField && (this.$altField = "string" == typeof this.opts.altField ? t(this.opts.altField) : this.opts.altField), this.inited = !1, this.visible = !1, this.silent = !1, this.currentDate = this.opts.startDate, this.currentView = this.opts.view, this._createShortCuts(), this.selectedDates = [], this.views = {}, this.keys = [], this.minRange = "", this.maxRange = "", this.init() }, (n = Datepicker).prototype = { viewIndexes: ["days", "months", "years"], init: function () { h || this.opts.inline || !this.elIsInput || this._buildDatepickersContainer(), this._buildBaseHtml(), this._defineLocale(this.opts.language), this._syncWithMinMaxDates(), this.elIsInput && (this.opts.inline || (this._setPositionClasses(this.opts.position), this._bindEvents()), this.opts.keyboardNav && this._bindKeyboardEvents(), this.$datepicker.on("mousedown", this._onMouseDownDatepicker.bind(this)), this.$datepicker.on("mouseup", this._onMouseUpDatepicker.bind(this))), this.opts.classes && this.$datepicker.addClass(this.opts.classes), this.views[this.currentView] = new Datepicker.Body(this, this.currentView, this.opts), this.views[this.currentView].show(), this.nav = new Datepicker.Navigation(this, this.opts), this.view = this.currentView, this.$datepicker.on("mouseenter", ".datepicker--cell", this._onMouseEnterCell.bind(this)), this.$datepicker.on("mouseleave", ".datepicker--cell", this._onMouseLeaveCell.bind(this)), this.inited = !0 }, _createShortCuts: function () { this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-86399999136e5), this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(86399999136e5) }, _bindEvents: function () { this.$el.on(this.opts.showEvent + ".adp", this._onShowEvent.bind(this)), this.$el.on("blur.adp", this._onBlur.bind(this)), this.$el.on("input.adp", this._onInput.bind(this)), t(e).on("resize.adp", this._onResize.bind(this)) }, _bindKeyboardEvents: function () { this.$el.on("keydown.adp", this._onKeyDown.bind(this)), this.$el.on("keyup.adp", this._onKeyUp.bind(this)), this.$el.on("hotKey.adp", this._onHotKey.bind(this)) }, isWeekend: function (e) { return -1 !== this.opts.weekends.indexOf(e) }, _defineLocale: function (e) { "string" == typeof e ? (this.loc = Datepicker.language[e], this.loc || (console.warn("Can't find language \"" + e + '" in Datepicker.language, will use "ru" instead'), this.loc = t.extend(!0, {}, Datepicker.language.ru)), this.loc = t.extend(!0, {}, Datepicker.language.ru, Datepicker.language[e])) : this.loc = t.extend(!0, {}, Datepicker.language.ru, e), this.opts.dateFormat && (this.loc.dateFormat = this.opts.dateFormat), "" !== this.opts.firstDay && (this.loc.firstDay = this.opts.firstDay) }, _buildDatepickersContainer: function () { h = !0, i.append('<div class="datepickers-container" id="datepickers-container"></div>'), a = t("#datepickers-container") }, _buildBaseHtml: function () { var e, s = t('<div class="datepicker-inline">'); e = "INPUT" == this.el.nodeName ? this.opts.inline ? s.insertAfter(this.$el) : a : s.appendTo(this.$el), this.$datepicker = t('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo(e), this.$content = t(".datepicker--content", this.$datepicker), this.$nav = t(".datepicker--nav", this.$datepicker) }, _triggerOnChange: function () { if (!this.selectedDates.length) return this.opts.onSelect("", "", this); var e, t = this.selectedDates, s = n.getParsedDate(t[0]), i = this, a = new Date(s.year, s.month, s.date); e = t.map(function (e) { return i.formatDate(i.loc.dateFormat, e) }).join(this.opts.multipleDatesSeparator), (this.opts.multipleDates || this.opts.range) && (a = t.map(function (e) { var t = n.getParsedDate(e); return new Date(t.year, t.month, t.date) })), this.opts.onSelect(e, a, this) }, next: function () { var e = this.parsedDate, t = this.opts; switch (this.view) { case "days": this.date = new Date(e.year, e.month + 1, 1), t.onChangeMonth && t.onChangeMonth(this.parsedDate.month, this.parsedDate.year); break; case "months": this.date = new Date(e.year + 1, e.month, 1), t.onChangeYear && t.onChangeYear(this.parsedDate.year); break; case "years": this.date = new Date(e.year + 10, 0, 1), t.onChangeDecade && t.onChangeDecade(this.curDecade) } }, prev: function () { var e = this.parsedDate, t = this.opts; switch (this.view) { case "days": this.date = new Date(e.year, e.month - 1, 1), t.onChangeMonth && t.onChangeMonth(this.parsedDate.month, this.parsedDate.year); break; case "months": this.date = new Date(e.year - 1, e.month, 1), t.onChangeYear && t.onChangeYear(this.parsedDate.year); break; case "years": this.date = new Date(e.year - 10, 0, 1), t.onChangeDecade && t.onChangeDecade(this.curDecade) } }, formatDate: function (e, t) { t = t || this.date; var s = e, i = this._getWordBoundaryRegExp, a = this.loc, h = n.getDecade(t), r = n.getParsedDate(t); switch (!0) { case /@/.test(s): s = s.replace(/@/, t.getTime()); case /dd/.test(s): s = s.replace(i("dd"), r.fullDate); case /d/.test(s): s = s.replace(i("d"), r.date); case /DD/.test(s): s = s.replace(i("DD"), a.days[r.day]); case /D/.test(s): s = s.replace(i("D"), a.daysShort[r.day]); case /mm/.test(s): s = s.replace(i("mm"), r.fullMonth); case /m/.test(s): s = s.replace(i("m"), r.month + 1); case /MM/.test(s): s = s.replace(i("MM"), this.loc.months[r.month]); case /M/.test(s): s = s.replace(i("M"), a.monthsShort[r.month]); case /yyyy/.test(s): s = s.replace(i("yyyy"), r.year); case /yyyy1/.test(s): s = s.replace(i("yyyy1"), h[0]); case /yyyy2/.test(s): s = s.replace(i("yyyy2"), h[1]); case /yy/.test(s): s = s.replace(i("yy"), r.year.toString().slice(-2)) }return s }, _getWordBoundaryRegExp: function (e) { return new RegExp("\\b(?=[a-zA-Z0-9äöüßÄÖÜ<])" + e + "(?![>a-zA-Z0-9äöüßÄÖÜ])") }, selectDate: function (e) { var t = this.opts, s = this.parsedDate, i = this.selectedDates.length, a = ""; if (e instanceof Date) { if ("days" == this.view && e.getMonth() != s.month && t.moveToOtherMonthsOnSelect && (a = new Date(e.getFullYear(), e.getMonth(), 1)), "years" == this.view && e.getFullYear() != s.year && t.moveToOtherYearsOnSelect && (a = new Date(e.getFullYear(), 0, 1)), a && (this.silent = !0, this.date = a, this.silent = !1, this.nav._render()), t.multipleDates && !t.range) { if (i === t.multipleDates) return; this._isSelected(e) || this.selectedDates.push(e) } else t.range ? 2 == i ? (this.selectedDates = [e], this.minRange = e, this.maxRange = "") : 1 == i ? (this.selectedDates.push(e), this.maxRange ? this.minRange = e : this.maxRange = e, this.selectedDates = [this.minRange, this.maxRange]) : (this.selectedDates = [e], this.minRange = e) : this.selectedDates = [e]; this._setInputValue(), t.onSelect && this._triggerOnChange(), t.autoClose && (t.multipleDates || t.range ? t.range && 2 == this.selectedDates.length && this.hide() : this.hide()), this.views[this.currentView]._render() } }, removeDate: function (e) { var t = this.selectedDates, s = this; if (e instanceof Date) return t.some(function (i, a) { if (n.isSame(i, e)) return t.splice(a, 1), s.selectedDates.length || (s.minRange = "", s.maxRange = ""), s.views[s.currentView]._render(), s._setInputValue(), s.opts.onSelect && s._triggerOnChange(), !0 }) }, today: function () { this.silent = !0, this.view = this.opts.minView, this.silent = !1, this.date = new Date }, clear: function () { this.selectedDates = [], this.minRange = "", this.maxRange = "", this.views[this.currentView]._render(), this._setInputValue(), this.opts.onSelect && this._triggerOnChange() }, update: function (e, s) { var i = arguments.length; return 2 == i ? this.opts[e] = s : 1 == i && "object" == typeof e && (this.opts = t.extend(!0, this.opts, e)), this._createShortCuts(), this._syncWithMinMaxDates(), this._defineLocale(this.opts.language), this.nav._addButtonsIfNeed(), this.nav._render(), this.views[this.currentView]._render(), this.elIsInput && !this.opts.inline && (this._setPositionClasses(this.opts.position), this.visible && this.setPosition(this.opts.position)), this.opts.classes && this.$datepicker.addClass(this.opts.classes), this }, _syncWithMinMaxDates: function () { var e = this.date.getTime(); this.silent = !0, this.minTime > e && (this.date = this.minDate), this.maxTime < e && (this.date = this.maxDate), this.silent = !1 }, _isSelected: function (e, t) { return this.selectedDates.some(function (s) { return n.isSame(s, e, t) }) }, _setInputValue: function () { var e, t = this, s = t.opts, i = t.loc.dateFormat, a = s.altFieldDateFormat, n = t.selectedDates.map(function (e) { return t.formatDate(i, e) }); s.altField && t.$altField.length && (e = (e = this.selectedDates.map(function (e) { return t.formatDate(a, e) })).join(this.opts.multipleDatesSeparator), this.$altField.val(e)), n = n.join(this.opts.multipleDatesSeparator), this.$el.val(n) }, _isInRange: function (e, t) { var s = e.getTime(), i = n.getParsedDate(e), a = n.getParsedDate(this.minDate), h = n.getParsedDate(this.maxDate), r = new Date(i.year, i.month, a.date).getTime(), o = new Date(i.year, i.month, h.date).getTime(), d = { day: s >= this.minTime && s <= this.maxTime, month: r >= this.minTime && o <= this.maxTime, year: i.year >= a.year && i.year <= h.year }; return t ? d[t] : d.day }, _getDimensions: function (e) { var t = e.offset(); return { width: e.outerWidth(), height: e.outerHeight(), left: t.left, top: t.top } }, _getDateFromCell: function (e) { var t = this.parsedDate, s = e.data("year") || t.year, i = null == e.data("month") ? t.month : e.data("month"), a = e.data("date") || 1; return new Date(s, i, a) }, _setPositionClasses: function (e) { var t = (e = e.split(" "))[0], s = "datepicker -" + t + "-" + e[1] + "- -from-" + t + "-"; this.visible && (s += " active"), this.$datepicker.removeAttr("class").addClass(s) }, setPosition: function (e) { e = e || this.opts.position; var t, s, i = this._getDimensions(this.$el), a = this._getDimensions(this.$datepicker), n = e.split(" "), h = this.opts.offset, r = n[0], o = n[1]; switch (r) { case "top": t = i.top - a.height - h; break; case "right": s = i.left + i.width + h; break; case "bottom": t = i.top + i.height + h; break; case "left": s = i.left - a.width - h }switch (o) { case "top": t = i.top; break; case "right": s = i.left + i.width - a.width; break; case "bottom": t = i.top + i.height - a.height; break; case "left": s = i.left; break; case "center": /left|right/.test(r) ? t = i.top + i.height / 2 - a.height / 2 : s = i.left + i.width / 2 - a.width / 2 }this.$datepicker.css({ left: s, top: t }) }, show: function () { this.setPosition(this.opts.position), this.$datepicker.addClass("active"), this.visible = !0 }, hide: function () { this.$datepicker.removeClass("active").css({ left: "-100000px" }), this.focused = "", this.keys = [], this.inFocus = !1, this.visible = !1, this.$el.blur() }, down: function (e) { this._changeView(e, "down") }, up: function (e) { this._changeView(e, "up") }, _changeView: function (e, t) { e = e || this.focused || this.date; var s = "up" == t ? this.viewIndex + 1 : this.viewIndex - 1; s > 2 && (s = 2), s < 0 && (s = 0), this.silent = !0, this.date = new Date(e.getFullYear(), e.getMonth(), 1), this.silent = !1, this.view = this.viewIndexes[s] }, _handleHotKey: function (e) { var t, s, i, a = n.getParsedDate(this._getFocusedDate()), h = this.opts, r = !1, o = !1, d = !1, l = a.year, c = a.month, u = a.date; switch (e) { case "ctrlRight": case "ctrlUp": c += 1, r = !0; break; case "ctrlLeft": case "ctrlDown": c -= 1, r = !0; break; case "shiftRight": case "shiftUp": o = !0, l += 1; break; case "shiftLeft": case "shiftDown": o = !0, l -= 1; break; case "altRight": case "altUp": d = !0, l += 10; break; case "altLeft": case "altDown": d = !0, l -= 10; break; case "ctrlShiftUp": this.up() }i = n.getDaysCount(new Date(l, c)), s = new Date(l, c, u), i < u && (u = i), s.getTime() < this.minTime ? s = this.minDate : s.getTime() > this.maxTime && (s = this.maxDate), this.focused = s, t = n.getParsedDate(s), r && h.onChangeMonth && h.onChangeMonth(t.month, t.year), o && h.onChangeYear && h.onChangeYear(t.year), d && h.onChangeDecade && h.onChangeDecade(this.curDecade) }, _registerKey: function (e) { this.keys.some(function (t) { return t == e }) || this.keys.push(e) }, _unRegisterKey: function (e) { var t = this.keys.indexOf(e); this.keys.splice(t, 1) }, _isHotKeyPressed: function () { var e, t = !1, s = this.keys.sort(); for (var i in o) e = o[i], s.length == e.length && e.every(function (e, t) { return e == s[t] }) && (this._trigger("hotKey", i), t = !0); return t }, _trigger: function (e, t) { this.$el.trigger(e, t) }, _focusNextCell: function (e, t) { t = t || this.cellType; var s = n.getParsedDate(this._getFocusedDate()), i = s.year, a = s.month, h = s.date; if (!this._isHotKeyPressed()) { switch (e) { case 37: "day" == t && (h -= 1), "month" == t && (a -= 1), "year" == t && (i -= 1); break; case 38: "day" == t && (h -= 7), "month" == t && (a -= 3), "year" == t && (i -= 4); break; case 39: "day" == t && (h += 1), "month" == t && (a += 1), "year" == t && (i += 1); break; case 40: "day" == t && (h += 7), "month" == t && (a += 3), "year" == t && (i += 4) }var r = new Date(i, a, h); r.getTime() < this.minTime ? r = this.minDate : r.getTime() > this.maxTime && (r = this.maxDate), this.focused = r } }, _getFocusedDate: function () { var e = this.focused || this.selectedDates[this.selectedDates.length - 1], t = this.parsedDate; if (!e) switch (this.view) { case "days": e = new Date(t.year, t.month, (new Date).getDate()); break; case "months": e = new Date(t.year, t.month, 1); break; case "years": e = new Date(t.year, 0, 1) }return e }, _getCell: function (e, t) { t = t || this.cellType; var s, i = n.getParsedDate(e), a = '.datepicker--cell[data-year="' + i.year + '"]'; switch (t) { case "month": a = '[data-month="' + i.month + '"]'; break; case "day": a += '[data-month="' + i.month + '"][data-date="' + i.date + '"]' }return (s = this.views[this.currentView].$el.find(a)).length ? s : "" }, destroy: function () { this.$el.off(".adp").data("datepicker", ""), this.selectedDates = [], this.focused = "", this.views = {}, this.keys = [], this.minRange = "", this.maxRange = "", this.opts.inline || !this.elIsInput ? this.$datepicker.closest(".datepicker-inline").remove() : this.$datepicker.remove() }, _onShowEvent: function () { this.visible || this.show() }, _onBlur: function () { !this.inFocus && this.visible && this.hide() }, _onMouseDownDatepicker: function (e) { this.inFocus = !0 }, _onMouseUpDatepicker: function (e) { this.inFocus = !1, this.$el.focus() }, _onInput: function () { this.$el.val() || this.clear() }, _onResize: function () { this.visible && this.setPosition() }, _onKeyDown: function (e) { var t = e.which; if (this._registerKey(t), t >= 37 && t <= 40 && (e.preventDefault(), this._focusNextCell(t)), 13 == t && this.focused) { if (this._getCell(this.focused).hasClass("-disabled-")) return; if (this.view != this.opts.minView) this.down(); else { var s = this._isSelected(this.focused, this.cellType); s ? s && this.opts.toggleSelected && this.removeDate(this.focused) : this.selectDate(this.focused) } } 27 == t && this.hide() }, _onKeyUp: function (e) { var t = e.which; this._unRegisterKey(t) }, _onHotKey: function (e, t) { this._handleHotKey(t) }, _onMouseEnterCell: function (e) { var s = t(e.target).closest(".datepicker--cell"), i = this._getDateFromCell(s); this.silent = !0, this.focused && (this.focused = ""), s.addClass("-focus-"), this.focused = i, this.silent = !1, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], this.maxRange = "", n.less(this.minRange, this.focused) && (this.maxRange = this.minRange, this.minRange = ""), this.views[this.currentView]._update()) }, _onMouseLeaveCell: function (e) { t(e.target).closest(".datepicker--cell").removeClass("-focus-"), this.silent = !0, this.focused = "", this.silent = !1 }, set focused(e) { if (!e && this.focused) { var t = this._getCell(this.focused); t.length && t.removeClass("-focus-") } this._focused = e, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], this.maxRange = "", n.less(this.minRange, this._focused) && (this.maxRange = this.minRange, this.minRange = "")), this.silent || (this.date = e) }, get focused() { return this._focused }, get parsedDate() { return n.getParsedDate(this.date) }, set date(e) { if (e instanceof Date) return this.currentDate = e, this.inited && !this.silent && (this.views[this.view]._render(), this.nav._render(), this.visible && this.elIsInput && this.setPosition()), e }, get date() { return this.currentDate }, set view(e) { if (this.viewIndex = this.viewIndexes.indexOf(e), !(this.viewIndex < 0)) return this.prevView = this.currentView, this.currentView = e, this.inited && (this.views[e] ? this.views[e]._render() : this.views[e] = new Datepicker.Body(this, e, this.opts), this.views[this.prevView].hide(), this.views[e].show(), this.nav._render(), this.opts.onChangeView && this.opts.onChangeView(e), this.elIsInput && this.visible && this.setPosition()), e }, get view() { return this.currentView }, get cellType() { return this.view.substring(0, this.view.length - 1) }, get minTime() { var e = n.getParsedDate(this.minDate); return new Date(e.year, e.month, e.date).getTime() }, get maxTime() { var e = n.getParsedDate(this.maxDate); return new Date(e.year, e.month, e.date).getTime() }, get curDecade() { return n.getDecade(this.date) } }, n.getDaysCount = function (e) { return new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate() }, n.getParsedDate = function (e) { return { year: e.getFullYear(), month: e.getMonth(), fullMonth: e.getMonth() + 1 < 10 ? "0" + (e.getMonth() + 1) : e.getMonth() + 1, date: e.getDate(), fullDate: e.getDate() < 10 ? "0" + e.getDate() : e.getDate(), day: e.getDay() } }, n.getDecade = function (e) { var t = 10 * Math.floor(e.getFullYear() / 10); return [t, t + 9] }, n.template = function (e, t) { return e.replace(/#\{([\w]+)\}/g, function (e, s) { if (t[s] || 0 === t[s]) return t[s] }) }, n.isSame = function (e, t, s) { if (!e || !t) return !1; var i = n.getParsedDate(e), a = n.getParsedDate(t), h = s || "day"; return { day: i.date == a.date && i.month == a.month && i.year == a.year, month: i.month == a.month && i.year == a.year, year: i.year == a.year }[h] }, n.less = function (e, t, s) { return !(!e || !t) && t.getTime() < e.getTime() }, n.bigger = function (e, t, s) { return !(!e || !t) && t.getTime() > e.getTime() }, Datepicker.language = { ru: { days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"], daysShort: ["Вос", "Пон", "Вто", "Сре", "Чет", "Пят", "Суб"], daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"], monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"], today: "Сегодня", clear: "Очистить", dateFormat: "dd.mm.yyyy", firstDay: 1 } }, t.fn.datepicker = function (e) { return this.each(function () { if (t.data(this, "datepicker")) { var s = t.data(this, "datepicker"); s.opts = t.extend(!0, s.opts, e), s.update() } else t.data(this, "datepicker", new Datepicker(this, e)) }) }, t(function () { t(".datepicker-here").datepicker() }), d = { days: '<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>', months: '<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>', years: '<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>' }, (l = Datepicker).Body = function (e, t, s) { this.d = e, this.type = t, this.opts = s, this.init() }, l.Body.prototype = { init: function () { this._buildBaseHtml(), this._render(), this._bindEvents() }, _bindEvents: function () { this.$el.on("click", ".datepicker--cell", t.proxy(this._onClickCell, this)) }, _buildBaseHtml: function () { this.$el = t(d[this.type]).appendTo(this.d.$content), this.$names = t(".datepicker--days-names", this.$el), this.$cells = t(".datepicker--cells", this.$el) }, _getDayNamesHtml: function (e, t, s, i) { return s = s || "", (i = null != i ? i : 0) > 7 ? s : 7 == (t = null != t ? t : e) ? this._getDayNamesHtml(e, 0, s, ++i) : (s += '<div class="datepicker--day-name' + (this.d.isWeekend(t) ? " -weekend-" : "") + '">' + this.d.loc.daysMin[t] + "</div>", this._getDayNamesHtml(e, ++t, s, ++i)) }, _getCellContents: function (e, t) { var s = "datepicker--cell datepicker--cell-" + t, i = new Date, a = this.d, n = a.opts, h = l.getParsedDate(e), r = {}, o = h.date; switch (n.onRenderCell && (o = (r = n.onRenderCell(e, t) || {}).html ? r.html : o, s += r.classes ? " " + r.classes : ""), t) { case "day": a.isWeekend(h.day) && (s += " -weekend-"), h.month != this.d.parsedDate.month && (s += " -other-month-", n.selectOtherMonths || (s += " -disabled-"), n.showOtherMonths || (o = "")); break; case "month": o = a.loc[a.opts.monthsField][h.month]; break; case "year": var d = a.curDecade; o = h.year, (h.year < d[0] || h.year > d[1]) && (s += " -other-decade-", n.selectOtherYears || (s += " -disabled-"), n.showOtherYears || (o = "")) }return n.onRenderCell && (o = (r = n.onRenderCell(e, t) || {}).html ? r.html : o, s += r.classes ? " " + r.classes : ""), n.range && (l.isSame(a.minRange, e, t) && (s += " -range-from-"), l.isSame(a.maxRange, e, t) && (s += " -range-to-"), 1 == a.selectedDates.length && a.focused ? ((l.bigger(a.minRange, e) && l.less(a.focused, e) || l.less(a.maxRange, e) && l.bigger(a.focused, e)) && (s += " -in-range-"), l.less(a.maxRange, e) && l.isSame(a.focused, e) && (s += " -range-from-"), l.bigger(a.minRange, e) && l.isSame(a.focused, e) && (s += " -range-to-")) : 2 == a.selectedDates.length && l.bigger(a.minRange, e) && l.less(a.maxRange, e) && (s += " -in-range-")), l.isSame(i, e, t) && (s += " -current-"), a.focused && l.isSame(e, a.focused, t) && (s += " -focus-"), a._isSelected(e, t) && (s += " -selected-"), a._isInRange(e, t) && !r.disabled || (s += " -disabled-"), { html: o, classes: s } }, _getDaysHtml: function (e) { for (var t, s, i = l.getDaysCount(e), a = new Date(e.getFullYear(), e.getMonth(), 1).getDay(), n = new Date(e.getFullYear(), e.getMonth(), i).getDay(), h = a - this.d.loc.firstDay, r = 6 - n + this.d.loc.firstDay, o = "", d = 1 - (h = h < 0 ? h + 7 : h), c = i + (r = r > 6 ? r - 7 : r); d <= c; d++)s = e.getFullYear(), t = e.getMonth(), o += this._getDayHtml(new Date(s, t, d)); return o }, _getDayHtml: function (e) { var t = this._getCellContents(e, "day"); return '<div class="' + t.classes + '" data-date="' + e.getDate() + '" data-month="' + e.getMonth() + '" data-year="' + e.getFullYear() + '">' + t.html + "</div>" }, _getMonthsHtml: function (e) { for (var t = "", s = l.getParsedDate(e), i = 0; i < 12;)t += this._getMonthHtml(new Date(s.year, i)), i++; return t }, _getMonthHtml: function (e) { var t = this._getCellContents(e, "month"); return '<div class="' + t.classes + '" data-month="' + e.getMonth() + '">' + t.html + "</div>" }, _getYearsHtml: function (e) { l.getParsedDate(e); for (var t = l.getDecade(e), s = "", i = t[0] - 1; i <= t[1] + 1; i++)s += this._getYearHtml(new Date(i, 0)); return s }, _getYearHtml: function (e) { var t = this._getCellContents(e, "year"); return '<div class="' + t.classes + '" data-year="' + e.getFullYear() + '">' + t.html + "</div>" }, _renderTypes: { days: function () { var e = this._getDayNamesHtml(this.d.loc.firstDay), t = this._getDaysHtml(this.d.currentDate); this.$cells.html(t), this.$names.html(e) }, months: function () { var e = this._getMonthsHtml(this.d.currentDate); this.$cells.html(e) }, years: function () { var e = this._getYearsHtml(this.d.currentDate); this.$cells.html(e) } }, _render: function () { this._renderTypes[this.type].bind(this)() }, _update: function () { var e, s, i, a = t(".datepicker--cell", this.$cells), n = this; a.each(function (a, h) { s = t(this), i = n.d._getDateFromCell(t(this)), e = n._getCellContents(i, n.d.cellType), s.attr("class", e.classes) }) }, show: function () { this.$el.addClass("active"), this.acitve = !0 }, hide: function () { this.$el.removeClass("active"), this.active = !1 }, _handleClick: function (e) { var t = e.data("date") || 1, s = e.data("month") || 0, i = e.data("year") || this.d.parsedDate.year; if (this.d.view == this.opts.minView) { var a = new Date(i, s, t), n = this.d._isSelected(a, this.d.cellType); n ? n && this.opts.toggleSelected && this.d.removeDate(a) : this.d.selectDate(a) } else this.d.down(new Date(i, s, t)) }, _onClickCell: function (e) { var s = t(e.target).closest(".datepicker--cell"); s.hasClass("-disabled-") || this._handleClick.bind(this)(s) } }, Datepicker.Navigation = function (e, t) { this.d = e, this.opts = t, this.$buttonsContainer = "", this.init() }, Datepicker.Navigation.prototype = { init: function () { this._buildBaseHtml(), this._bindEvents() }, _bindEvents: function () { this.d.$nav.on("click", ".datepicker--nav-action", t.proxy(this._onClickNavButton, this)), this.d.$nav.on("click", ".datepicker--nav-title", t.proxy(this._onClickNavTitle, this)), this.d.$datepicker.on("click", ".datepicker--button", t.proxy(this._onClickNavButton, this)) }, _buildBaseHtml: function () { this._render(), this._addButtonsIfNeed() }, _addButtonsIfNeed: function () { this.opts.todayButton && this._addButton("today"), this.opts.clearButton && this._addButton("clear") }, _render: function () { var e = this._getTitle(this.d.currentDate), s = Datepicker.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>', t.extend({ title: e }, this.opts)); this.d.$nav.html(s), "years" == this.d.view && t(".datepicker--nav-title", this.d.$nav).addClass("-disabled-"), this.setNavStatus() }, _getTitle: function (e) { return this.d.formatDate(this.opts.navTitles[this.d.view], e) }, _addButton: function (e) { this.$buttonsContainer.length || this._addButtonsContainer(); var s = { action: e, label: this.d.loc[e] }, i = Datepicker.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>', s); t("[data-action=" + e + "]", this.$buttonsContainer).length || this.$buttonsContainer.append(i) }, _addButtonsContainer: function () { this.d.$datepicker.append('<div class="datepicker--buttons"></div>'), this.$buttonsContainer = t(".datepicker--buttons", this.d.$datepicker) }, setNavStatus: function () { if ((this.opts.minDate || this.opts.maxDate) && this.opts.disableNavWhenOutOfRange) { var e = this.d.parsedDate, t = e.month, s = e.year, i = e.date; switch (this.d.view) { case "days": this.d._isInRange(new Date(s, t - 1, i), "month") || this._disableNav("prev"), this.d._isInRange(new Date(s, t + 1, i), "month") || this._disableNav("next"); break; case "months": this.d._isInRange(new Date(s - 1, t, i), "year") || this._disableNav("prev"), this.d._isInRange(new Date(s + 1, t, i), "year") || this._disableNav("next"); break; case "years": this.d._isInRange(new Date(s - 10, t, i), "year") || this._disableNav("prev"), this.d._isInRange(new Date(s + 10, t, i), "year") || this._disableNav("next") } } }, _disableNav: function (e) { t('[data-action="' + e + '"]', this.d.$nav).addClass("-disabled-") }, _activateNav: function (e) { t('[data-action="' + e + '"]', this.d.$nav).removeClass("-disabled-") }, _onClickNavButton: function (e) { var s = t(e.target).closest("[data-action]").data("action"); this.d[s]() }, _onClickNavTitle: function (e) { if (!t(e.target).hasClass("-disabled-")) return "days" == this.d.view ? this.d.view = "months" : void (this.d.view = "years") } } }(window, jQuery);